Jenkins é um servidor de automação. Serve para CI/CD. Permite fazer build das merdas etc

estou utilizando o docker para isso 

docker run -d -v jenkins_home:/var/jenkins_home -p 8080:8080 -p 50000:50000 --restart=on-failure jenkins/jenkins

Na primeira vez ele precisa instalar. Se não instalar limpa a cash do bowser. No meu caso, por estar usando outros servidores ele não queria funcionar

para evitar dor de cabeça instale o sudo e o vim no docker 
	#no cmd do windows docker exec -u root -t -i [container_id] /bin/bash
	apt-get update
	apt-get install sudo
	apt-get install vim



Jobs
	Tarefas que queremos que o jekins faça

	Usando o frrestyle project->(configure tab) -> buld-> execute shell

	existe diferença entre usa "" e ''  aspas permite passar variáveis usando $()

	no bash(dentro do docker->exec)
		echo "puta"

		echo "O dia e hora são $(date)"

		#para criar variáveis no bash não pode ter espaços
		name=Putas mexicanas # se for nome = putas mexicanas não funciona
		echo "Queria estar no méxico para comer $name"
		
		#Gravar arquivos dentro do container
		(rm -rf /tmp/info para deletar file (-rd para diretórios))
		name="Putas mexicanas" # se for nome = putas mexicanas não funciona
		echo "Queria estar no méxico para comer $name" > /tmp/info
		
		#criando um script que aceita parâmetros | crie uma pasta e importe já que não dá para usar o vi
		#se der erro de execussão ls -l [nome do ficheiro para ver permissões]
		#para alterar permissão de execussão. O docker não tem sudo no jenkins 
			#no cmd do windows docker exec -u root -t -i [container_id] /bin/bash
			#navegue até o ficheiro e faça o chmod
		
			#!/bin/bash
			
			NAME=$1
			LASTNAME=$2
			
			echo "Hello, $NAME $LASTNAME"
			
			
			no JOB passamos o caminho /tmp/scriptsJ/script.sh 
			
			Name="gabriel"
			LastName="martins"
			/tmp/scriptsJ/script.sh $Name $LastName

	Parâmetros no Jenkins	(não consigo fazer o bash funcionar mesmo com o código estando igual)
		JOB -> general-> this project is parameterized
		o nome é o nome da variável(parm) e o value o valor dela
		echo "hello $Fist_Name $Last_Name "
		
		
	
	
	Jankins and docker (não consigo conectar )
		criar a docker file
		no cmd crea a chave do ssh-> ssh-keygen -f remote-key
		criar a doker-compose.yml
		Criar a imagem com docker build(cria imagem com base no dockerfile)
		faz o docker-compose up para criar o container com base no dockerCompose-yml(que tem as duas imagens e as outras configs)
	
		logar no container do jenkins 
			apt-get update
			apt-get install sudo
			sudo apt install openssh-server
			
			ssh nomeDoUser@nomDoHost
			
			e fazer um ssh no centos7 que acabei de criar
		
	Security
		
		
	ENV variables
		global
			https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#using-environment-variables
		Custom
			configure->global properties-> enviromentVariables
			
		Cron variables	
			Dentro de um job -> Build periodically
				e basta escrever a cron expression
				
		External execution
			Jenkins permite executar os jobs externamente mas para isso precisa de um brumb
			
			
				no jenkins: nas versões mais novas do jenkis precisamos desativar o csrf manualmente. Sem issão não podemos fazer os requests, mesmo com os crumbs
					menage jenkins -> Script console
						import jenkins.model.Jenkins
						def instance = Jenkins.instance
						instance.setCrumbIssuer(null)
			
				no container :
										[user:pass]								[url para o jenkis. no meu caso estou na rede do docker]   [o grep corta da requisição apenas a key do crumb]
					sem parâmetros:
						CRUMB=$(curl -u admin:b598548b8fa94fba862855b09a759334 'http://jenkins:8080/crumbIssuer/api/json' | grep -o '"crumb":"[^"]*' | cut -d':' -f2 | tr -d '"')
						echo $CRUMB
						
						# Disparar construção de job: agora é ir ver se compilou no jenkins 
						curl -u admin:b598548b8fa94fba862855b09a759334 -X POST 'http://jenkins:8080/job/noParmsJob//build' -H "Jenkins-Crumb: $CRUMB"
					
					com parâmetros:	
					curl -u admin:b598548b8fa94fba862855b09a759334 -X POST 'http://jenkins:8080/job/WithParmsJob/buildWithParameters?querSexo=false' -H "Jenkins-Crumb: $CRUMB"
						
						
		Email
			Quando se instala o jenkis ele instala o pluging de email, mas como o google não permite mais acessar a cena do acesso menos seguro não consigo fazer essa parte
			
			job -> post built actions:
				marcar as checkboxes
				escrever os emails
		
		
		
		Maven
			mavenIntegration
			
			clone repo from git: https://github.com/jenkins-docs/simple-java-maven-app
			
			criar um job -> source code menagement 
				passa o link do repo
			
			Conceito de workspace:
				quando se executa um job, as coisas vão parar em um workspace 
				
				docker exec -ti jenkins bash
				
				ls -l var/jenkins_home/workspace
				
			Criando a maven installation
			
				manage/configureTools/
					configura com qualquer nome
			
			
				no job:
					build-> invoke top level maven target
					Seleciona o nome que demos previamente
					Goals-> -B -DskipTestes clean package
					
					após clicar em build, vá até o o caminho ls -l var/jenkins_home/workspace/Maven-project/target
					
					volta no job-> cria outra cena do maeven e escreve test para poder testar
						os resultados ficam na pasta ls -l var/jenkins_home/workspace/Maven-project/target/surefire-reports
					
					
					quando os testes passarem, execute o jar em uma bash script pelo jenkins
					
					java -jar /var/jenkins_home/workspace/Maven-project/target/my-app-1.0-SNAPSHOT.jar
					
					
					No job:
					´	nova task ->post build actions -> publis junit test 
							target/surefire-reports/*.xml
							
							
							
							
					O resultado de uma build é chamada de archive. Se quisermos guardar esse resultado é no post build actions 
					No job:
					´	nova task ->post build actions -> Archive the artifacts
							target/*.jar
			
			
			
			Seed Job(DSL)
				job que cria job http://localhost:8080/plugin/job-dsl/api-viewer/index.html
				
				
				Olha na documentação para maiores informações (ou não)
				
				job('baleia') 
				{
				  description('minha descrição')
				  
				  parameters {
					stringParam('STRING_PARAM', 'defaultValue', 'Uma descrição para o parâmetro string')
					booleanParam('BOOLEAN_PARAM', true, 'Uma descrição para o parâmetro boolean')
					choiceParam('CHOICE_PARAM', ['Opção 1', 'Opção 2', 'Opção 3'], 'Uma descrição para o parâmetro de escolha')
					textParam('TEXT_PARAM', 'Texto padrão', 'Uma descrição para o parâmetro de texto')
					
				  }
				  scm{
					git('https://github.com/jenkins-docs/simple-java-maven-app/branches')
				  }
				  
				  triggers{
					cron('H 5 * * 7')
				  }
				  
				  steps{
					shell("echo 'sou uma putinha suja'")
				  }
				  
				  publishers{
					mailer('testeMail@mail.com',true,true)
				  }
				}
				
		
		
		pipelines
		
			pipeline {
				agent any
				
				environment{
				   NAME = 'Suruba'
					LAST_NAME = 'de_nego'  // Changed variable name to uppercase and removed spaces
					SECRET = credentials('SECRET')  // Changed variable name to uppercase
				}

				stages {
					stage('Build') {
						steps {
							
							echo 'Building'
							
							sh ' echo "posso executar vários passos no mesmo stage"'
							
							sh '''
								echo "esse passo é em multi-line $NAME $LAST_NAME $SECRET"
							
							'''

						}
					}
					stage('Test') {
						steps {
							echo 'Testing'
						}
					}
					stage('Deploy') {
						steps {
							echo 'Deploying'
						}
					}
				}
				 post {
					always {
						echo 'This will always run'
					}
					success {
						echo 'This will run only if the pipeline succeeds'
						// Adicione aqui outras ações de sucesso, como notificações
					}
					failure {
						echo 'This will run only if the pipeline fails'
						// Adicione aqui outras ações de falha, como notificações ou limpeza
					}
					unstable {
						echo 'This will run if the pipeline is unstable'
						// Ações para instabilidade, como o envio de relatórios específicos
					}
					changed {
						echo 'This will run if the pipeline state changes compared to the last run'
						// Ações para mudanças de estado, como alertas ou logs específicos
					}
				}
			}








Fim do curso



	Instalar o docker dentro de uma imagem do docker
	
	no meu caso que usei ele direto no windows ao invés de intalar um vm linux e a partir dela instalar o docker e depois criar os containers
	eu fico precisando de um arquivo Docker.sock que existe no linux mas não no windows por usar TCP como protocolo de transmissão de dados
	Como o container precisaria de acesso a esse arquivo, que seria passado no volume do dockercompose "/var/run/docker.sock://var/run/docker.sock"
	
	esquece estava carente. só precisava dessa merda de linha
	
	
	as imagens vão ser buidades por outro container do docker, mas dessa vez um usando o maven por ser uma aplicação java
	
	docker run -ti -v $PWD/java-app:/app maven:3-alpine sh #na formação
	docker run --rm -ti -v C:/Users/admin/Desktop/formação/material-de-foma-oes/jenkins/pipeline/java-app:/app -v /root/.m2/:/root/.m2/  -w /app maven:3-alpine sh

	cd /app 
	
	quando aparecer o pom e o src -> mvn package para dar build 
	
	#entra direto no diretório em a shell interativa e builda o programa
	docker run --rm -v C:/Users/admin/Desktop/formação/material-de-foma-oes/jenkins/pipeline/java-app:/app -v /root/.m2/:/root/.m2/  -w /app maven:3-alpine mvn -B -DskipTestes clean package
	
	
	#criamos o mvn.bat na pasta build mas 	não funciona
		para chamar o arquivo passamos C:\Users\admin\Desktop\formação\material-de-foma-oes\jenkins\pipeline\jenkins\build/mvn.bat
	
	
	
	
	
	#Buildando a imagem no [diretório build]
	primeiro copie o .jar do diretório C:\Users\admin\Desktop\formação\material-de-foma-oes\jenkins\pipeline\java-app\target para o diretório C:\Users\admin\Desktop\formação\material-de-foma-oes\jenkins\pipeline\jenkins\test
	
	docker build -f Dockerfile-Java -t test .
	
	#testar o que buildamos
	docker run --rm -ti test sh
	
	
	#criar o teste automáricamente 
	docker-compose -f docker-compose-build.yml build 